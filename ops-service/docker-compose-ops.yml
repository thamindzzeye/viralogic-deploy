services:
  # PostgreSQL Database for Ops Service
  ops_db:
    image: postgres:15-alpine
    container_name: ops-db
    environment:
      POSTGRES_DB: ops_monitoring
      POSTGRES_USER: ops_user
      POSTGRES_PASSWORD: ops_password
    volumes:
      - ../../docker_volumes/ops-service/postgres:/var/lib/postgresql/data
    networks:
      - ops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ops_user -d ops_monitoring"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis for Ops Service
  redis:
    image: redis:7-alpine
    container_name: ops-redis
    volumes:
      - ../../docker_volumes/ops-service/redis:/data
    networks:
      - ops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Loki - Log aggregation and storage
  loki:
    image: grafana/loki:2.9.0
    container_name: ops-loki
    ports:
      - "1821:1821"
    command: -config.file=/etc/loki/local-config.yaml -server.http-listen-port=1821                                                                             
    volumes:
      - ./config/loki:/etc/loki
      - ../../docker_volumes/ops-service/loki:/loki
    networks:
      - ops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:1821/ready || exit 1"]                                                         
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s

  # Grafana - Dashboard and visualization
  grafana:
    image: grafana/grafana:10.2.0
    container_name: ops-grafana
    ports:
      - "1820:3000"
    env_file:
      - .env
    volumes:
      - ../../docker_volumes/ops-service/grafana:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
      - ./config/grafana/grafana.ini:/etc/grafana/grafana.ini
    networks:
      - ops-network
    restart: unless-stopped
    depends_on:
      loki:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]                                                    
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 30s

  # Promtail - Log collection agent
  promtail:
    image: grafana/promtail:2.9.0
    container_name: ops-promtail
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./config/promtail:/etc/promtail
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - ops-network
    restart: unless-stopped
    depends_on:
      loki:
        condition: service_healthy

  # Prometheus - Metrics collection and storage
  prometheus:
    image: prom/prometheus:latest
    container_name: ops-prometheus
    ports:
      - "1822:1822"
    volumes:
      - ./config/prometheus:/etc/prometheus
      - ../../docker_volumes/ops-service/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.listen-address=0.0.0.0:1822'
    networks:
      - ops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:1822/-/healthy || exit 1"]                                                     
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s

  # AlertManager - Alert handling and notifications
  alertmanager:
    image: prom/alertmanager:latest
    container_name: ops-alertmanager
    ports:
      - "1823:1823"
    volumes:
      - ./config/alertmanager:/etc/alertmanager
      - ../../docker_volumes/ops-service/alertmanager:/alertmanager
    env_file:
      - .env
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:1823'
      - '--web.listen-address=0.0.0.0:1823'
    networks:
      - ops-network
    restart: unless-stopped
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:1823/-/healthy || exit 1"]                                                     
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s

  # Viralogic Ops Service - Centralized Monitoring (GIT BUILD)
  viralogic-ops:
    build:
      context: ../../Viralogic/micro-services/ops-service
      dockerfile: Dockerfile
    container_name: ops-viralogic-ops
    ports:
      - "1825:1825"
    env_file:
      - .env
    depends_on:
      ops_db:
        condition: service_healthy
      redis:
        condition: service_healthy
      loki:
        condition: service_healthy
      grafana:
        condition: service_healthy
      prometheus:
        condition: service_healthy
    networks:
      - ops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:1825/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "logging_jobname=viralogic-ops,logging_stream=stdout"

  # Cloudflare Tunnel for Ops Service
  cloudflared-ops:
    image: cloudflare/cloudflared:latest
    volumes:
      - ./cloudflared:/etc/cloudflared
    command: tunnel --config /etc/cloudflared/config.yml run viralogic-ops-production                                                                           
    depends_on:
      - grafana
      - viralogic-ops
    restart: unless-stopped
    networks:
      - ops-network
      - viralogic-network

networks:
  ops-network:
    driver: bridge
    name: ops-network
  viralogic-network:
    external: true
    name: viralogic-network