services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    env_file:
      - .env
    command: postgres -p 1723
    volumes:
      - ../docker_volumes/viralogic-postgres:/data
      - ../docker_volumes_nobackup/viralogic-postgres:/tmp
    ports:
      - "1723:1723"
    networks:
      - viralogic-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    env_file:
      - .env
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --port 1724
    volumes:
      - ../docker_volumes/viralogic-redis:/data
      - ../docker_volumes_nobackup/viralogic-redis:/tmp
    ports:
      - "1724:1724"
    networks:
      - viralogic-network
    restart: unless-stopped

  # Backend API
  backend:
    image: ghcr.io/thamindzzeye/viralogic/backend:main
    env_file:
      - .env
    ports:
      - "1720:1720"
    command: uvicorn app.main:app --host 0.0.0.0 --port 1720
    volumes:
      - ../docker_volumes_nobackup/viralogic-logs:/logs
      - ../docker_volumes_nobackup:/temp
      - ../docker_volumes:/files
    depends_on:
      - postgres
      - redis
    networks:
      - viralogic-network
    restart: unless-stopped

  # Frontend
  frontend:
    image: ghcr.io/thamindzzeye/viralogic/frontend:main
    env_file:
      - .env
    ports:
      - "1721:1721"
    command: node server.js
    volumes:
      - ../docker_volumes_nobackup/viralogic-logs:/logs
    depends_on:
      - backend
    networks:
      - viralogic-network
    restart: unless-stopped

  # Celery Worker
  celeryworker:
    image: ghcr.io/thamindzzeye/viralogic/backend:main
    command: celery -A app.celery.celery_app worker --loglevel=info --concurrency=10 -Q celery,auto_post,file_processing,ai_content_generation
    env_file:
      - .env
    volumes:
      - ../docker_volumes_nobackup/viralogic-logs:/logs
    depends_on:
      - postgres
      - redis
    networks:
      - viralogic-network
    restart: unless-stopped

  # Celery Beat (Scheduler)
  celerybeat:
    image: ghcr.io/thamindzzeye/viralogic/backend:main
    command: celery -A app.celery.celery_app beat --loglevel=info
    env_file:
      - .env
    volumes:
      - ../docker_volumes_nobackup/viralogic-logs:/logs
      - ../docker_volumes_nobackup/viralogic-celerybeat:/var/lib/celery
    depends_on:
      - postgres
      - redis
    networks:
      - viralogic-network
    restart: unless-stopped

  # Cloudflare Tunnel for Main App
  cloudflared-main:
    image: cloudflare/cloudflared:latest
    volumes:
      - ./cloudflared:/etc/cloudflared
    command: tunnel --config /etc/cloudflared/config.yml run viralogic-production
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - viralogic-network

networks:
  viralogic-network:
    driver: bridge
