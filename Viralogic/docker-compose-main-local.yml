services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    env_file:
      - .env
    command: postgres -p 1723
    volumes:
      - ../../docker_volumes/viralogic/postgres:/data
      - ../../docker_volumes_nobackup/viralogic/postgres:/tmp
    ports:
      - "1723:1723"
    networks:
      - viralogic-network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "logging_jobname=postgres,logging_stream=stdout"

  # Redis Cache
  redis:
    image: redis:7-alpine
    env_file:
      - .env
    command: sh -c "redis-server --port 1724 --requirepass $$REDIS_PASSWORD --appendonly yes --dir /data"
    volumes:
      - ../../docker_volumes/viralogic/redis:/data
      - ../../docker_volumes_nobackup/viralogic/redis:/tmp
    ports:
      - "1724:1724"
    networks:
      - viralogic-network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "logging_jobname=redis,logging_stream=stdout"

  # Backend API
  backend:
    image: viralogic/backend:local
    env_file:
      - .env
    ports:
      - "1720:1720"
    command: uvicorn app.main:app --host 0.0.0.0 --port 1720
    volumes:
      - ../../docker_logs/backend:/logs
      - ../../docker_volumes_nobackup:/temp
      - ../../docker_volumes:/files
    depends_on:
      - postgres
      - redis
    networks:
      - viralogic-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import requests; requests.get('http://0.0.0.0:1720/health')\" || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "logging_jobname=backend,logging_stream=stdout"
    labels:
      - "logging_jobname=backend"
      - "logging_stream=stdout"

  # Frontend
  frontend:
    image: viralogic/frontend:local
    env_file:
      - .env
    ports:
      - "1721:1721"
    command: node server.js
    volumes:
      - ../../docker_logs/frontend:/logs
    depends_on:
      - backend
    networks:
      - viralogic-network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "logging_jobname=frontend,logging_stream=stdout"

  # Celery Worker
  celeryworker:
    image: viralogic/backend:local
    command: celery -A app.celery.celery_app worker --loglevel=info --concurrency=10 -Q celery,default,file_processing,ai_content_generation,auto_post_processing,schedule_discovery,auto_post_execution,content_generation,maintenance,url_processing
    env_file:
      - .env
    volumes:
      - ../../docker_logs/backend:/logs
    depends_on:
      - postgres
      - redis
    networks:
      - viralogic-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "celery -A app.celery.celery_app inspect ping || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "logging_jobname=celeryworker,logging_stream=stdout"

  # Celery Beat (Scheduler)
  celerybeat:
    image: viralogic/backend:local
    command: celery -A app.celery.celery_app beat --loglevel=info --schedule=/app/celerybeat-data/celerybeat-schedule
    env_file:
      - .env
    volumes:
      - ../../docker_logs/backend:/logs
      - ../../docker_volumes_nobackup/viralogic/celerybeat:/app/celerybeat-data
    depends_on:
      - postgres
      - redis
    networks:
      - viralogic-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep 'celery.*beat' | grep -v grep || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "logging_jobname=celerybeat,logging_stream=stdout"

  # Adminer - Database Management Interface
  adminer:
    image: adminer:4.8.1
    ports:
      - "1800:1800"
    environment:
      ADMINER_DEFAULT_SERVER: postgres:1723
      ADMINER_DESIGN: pepa-linha-dark
    command: php -S 0.0.0.0:1800
    depends_on:
      - postgres
    networks:
      - viralogic-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:1800 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "logging_jobname=adminer,logging_stream=stdout"

  # Cloudflare Tunnel for Main App
  cloudflared-main:
    image: cloudflare/cloudflared:latest
    volumes:
      - ./cloudflared:/etc/cloudflared
    command: tunnel --config /etc/cloudflared/config.yml run viralogic-production
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - viralogic-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "logging_jobname=cloudflared,logging_stream=stdout"

networks:
  viralogic-network:
    driver: bridge
